// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-tenant relationship
  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id])

  // User roles within tenant
  roles UserRole[]

  @@map("users")
}

model Tenant {
  id          String   @id @default(cuid())
  name        String
  subdomain   String   @unique
  settings    Json     @default("{}")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  users UserRole[]
  ownerUsers User[]
  tenantSettings TenantSettings?
  perspectives   Perspective[]

  @@map("tenants")
}

model TenantSettings {
  id                String   @id @default(cuid())
  tenantId          String   @unique
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  // Terminology customization with smart defaults
  terminology       Json     @default("{\"perspectives\":\"Perspectives\",\"objectives\":\"Objectives\",\"kpis\":\"KPIs\",\"targets\":\"Targets\",\"initiatives\":\"Initiatives\"}")
  
  // Fiscal year and periods with intelligent defaults
  fiscalYearStart   DateTime @default("2025-01-01T00:00:00Z")
  periods           Json     @default("[]")
  
  // Basic branding with minimal required fields
  branding          Json     @default("{}")
  
  // Setup completion tracking to guide users
  setupCompleted    Boolean  @default(false)
  setupStep         Int      @default(1)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("tenant_settings")
}

model Perspective {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  code        String   // Auto-generated from name to reduce typing
  name        String
  description String?  // Optional to reduce required fields
  color       String   @default("#3B82F6") // Smart default blue
  icon        String?  // Optional visual enhancement
  sortOrder   Int      @default(0) // For drag-drop reordering
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([tenantId, code])
  @@map("perspectives")
}

model Role {
  id          String   @id @default(cuid())
  name        String   // e.g., "Super Admin", "Strategy Team", "KPI Champ", etc.
  code        String   @unique // e.g., "SUPER_ADMIN", "STRATEGY_TEAM", etc.
  description String?
  permissions Json     @default("[]") // Array of permission strings
  isSystem    Boolean  @default(false) // System roles vs custom roles
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  users UserRole[]

  @@map("roles")
}

model UserRole {
  id       String @id @default(cuid())
  userId   String
  tenantId String
  roleId   String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tenantId, roleId])
  @@map("user_roles")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model AuthCode {
  id        String   @id @default(cuid())
  email     String   @unique
  code      String
  attempts  Int      @default(0)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("auth_codes")
}
