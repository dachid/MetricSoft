generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(cuid())
  email                  String                  @unique
  name                   String?
  profilePicture         String?                 // Base64 encoded image
  lineManager            String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  tenantId               String?
  orgAssignments         UserOrgAssignment[]
  roles                  UserRole[]
  sessions               Session[]
  tenant                 Tenant?                 @relation(fields: [tenantId], references: [id], onDelete: Restrict)
  kpiChampionAssignments OrgUnitKpiChampion[]
  individualKpis         IndividualKPI[]
  assignedKpis           OrganizationalKPI[]     @relation("AssignedKpis")
  
  // New KPI System Relations
  evaluatedKPIs          KPI[]                   @relation("EvaluatedKPIs")
  createdKPIs            KPI[]                   @relation("CreatedKPIs")
  createdObjectives      KPIObjective[]          @relation("CreatedObjectives")
  createdComponents      PerformanceComponent[]  @relation("CreatedComponents")
  sharedKPIs             KPIShare[]              @relation("SharedKPIs")
  sharedByKPIs           KPIShare[]              @relation("SharedByKPIs")
  kpiAudits              KPIAuditLog[]           @relation("KPIAudits")

  @@map("users")
}

model Tenant {
  id                     String                  @id @default(cuid())
  name                   String
  subdomain              String                  @unique
  settings               Json                    @default("{}")
  isActive               Boolean                 @default(true)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  allowedDomains         String[]                @default([])
  fiscalYears            FiscalYear[]
  orgUnits               OrgUnit[]
  perspectives           Perspective[]
  tenantSettings         TenantSettings?
  users                  UserRole[]
  ownerUsers             User[]
  performanceComponents  PerformanceComponent[]
  kpis                   KPI[]
  kpiObjectives          KPIObjective[]

  @@map("tenants")
}

model TenantSettings {
  id                 String   @id @default(cuid())
  tenantId           String   @unique
  terminology        Json     @default("{\"kpis\": \"KPIs\", \"targets\": \"Targets\", \"objectives\": \"Objectives\", \"initiatives\": \"Initiatives\", \"perspectives\": \"Perspectives\"}")
  orgStructureConfig Json     @default("{\"customLevels\": [], \"enabledLevels\": [\"ORGANIZATION\", \"DEPARTMENT\", \"INDIVIDUAL\"]}")
  fiscalYearStart    DateTime @default(dbgenerated("'2025-01-01 00:00:00'::timestamp without time zone"))
  periods            Json     @default("[]")
  branding           Json     @default("{}")
  setupCompleted     Boolean  @default(false)
  setupStep          Int      @default(1)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  tenant             Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("tenant_settings")
}

model Perspective {
  id          String   @id @default(cuid())
  tenantId    String
  code        String
  name        String
  description String?
  color       String   @default("#3B82F6")
  icon        String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, code])
  @@map("perspectives")
}

model Role {
  id          String     @id @default(cuid())
  name        String
  code        String     @unique
  description String?
  permissions Json       @default("[]")
  isSystem    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  users       UserRole[]

  @@map("roles")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  tenantId  String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId, roleId])
  @@map("user_roles")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  csrfToken String?  @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model AuthCode {
  id        String   @id @default(cuid())
  email     String   @unique
  code      String
  attempts  Int      @default(0)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("auth_codes")
}

model OrgUnit {
  id                String                    @id @default(cuid())
  tenantId          String
  fiscalYearId      String
  levelDefinitionId String
  code              String
  name              String
  description       String?
  parentId          String?
  isActive          Boolean                   @default(true)
  sortOrder         Int                       @default(0)
  metadata          Json                      @default("{}")
  effectiveFrom     DateTime                  @default(now())
  effectiveTo       DateTime?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  fiscalYear        FiscalYear                @relation(fields: [fiscalYearId], references: [id], onDelete: Cascade)
  levelDefinition   FiscalYearLevelDefinition @relation(fields: [levelDefinitionId], references: [id], onDelete: Cascade)
  parent            OrgUnit?                  @relation("OrgUnitHierarchy", fields: [parentId], references: [id])
  children          OrgUnit[]                 @relation("OrgUnitHierarchy")
  tenant            Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userAssignments   UserOrgAssignment[]
  kpiChampions      OrgUnitKpiChampion[]
  organizationalKpis OrganizationalKPI[]
  kpis              KPI[]
  kpiObjectives     KPIObjective[]
  performanceComponents PerformanceComponent[]

  @@unique([fiscalYearId, levelDefinitionId, code])
  @@map("org_units")
}

model UserOrgAssignment {
  id            String    @id @default(cuid())
  userId        String
  orgUnitId     String
  role          String?
  effectiveFrom DateTime  @default(now())
  effectiveTo   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orgUnit       OrgUnit   @relation(fields: [orgUnitId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, orgUnitId])
  @@map("user_org_assignments")
}

model FiscalYear {
  id                     String                           @id @default(cuid())
  tenantId               String
  name                   String
  startDate              DateTime
  endDate                DateTime
  status                 String                           @default("draft")
  isCurrent              Boolean                          @default(false)
  createdAt              DateTime                         @default(now())
  updatedAt              DateTime                         @updatedAt
  confirmations          FiscalYearConfirmation[]
  levelDefinitions       FiscalYearLevelDefinition[]
  perspectives           FiscalYearPerspective[]
  tenant                 Tenant                           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orgUnits               OrgUnit[]
  cascadeRelationships   PerformanceCascadeRelationship[]
  componentTemplates     PerformanceComponentTemplate[]
  kpis                   KPI[]
  kpiObjectives          KPIObjective[]

  @@unique([tenantId, name])
  @@map("fiscal_years")
}

model FiscalYearLevelDefinition {
  id                     String                           @id @default(cuid())
  fiscalYearId           String
  code                   String
  name                   String
  pluralName             String
  hierarchyLevel         Int
  isStandard             Boolean                          @default(true)
  isEnabled              Boolean                          @default(true)
  isIndividualUnit       Boolean                          @default(false) // Toggle for Individual Unit level
  icon                   String?
  color                  String                           @default("#6B7280")
  metadata               Json                             @default("{}")
  createdAt              DateTime                         @default(now())
  updatedAt              DateTime                         @updatedAt
  fiscalYear             FiscalYear                       @relation(fields: [fiscalYearId], references: [id], onDelete: Cascade)
  orgUnits               OrgUnit[]
  fromCascadeRelations   PerformanceCascadeRelationship[] @relation("FromLevel")
  toCascadeRelations     PerformanceCascadeRelationship[] @relation("ToLevel")
  componentTemplates     PerformanceComponentTemplate[]

  @@unique([fiscalYearId, code])
  @@unique([fiscalYearId, hierarchyLevel])
  @@map("fiscal_year_level_definitions")
}

model FiscalYearConfirmation {
  id               String     @id @default(cuid())
  fiscalYearId     String
  confirmationType String
  confirmedBy      String
  confirmedAt      DateTime
  canModify        Boolean    @default(false)
  metadata         Json?
  createdAt        DateTime   @default(now())
  fiscalYear       FiscalYear @relation(fields: [fiscalYearId], references: [id], onDelete: Cascade)

  @@unique([fiscalYearId, confirmationType])
  @@map("fiscal_year_confirmations")
}

model FiscalYearPerspective {
  id            String     @id @default(cuid())
  fiscalYearId  String
  code          String
  name          String
  description   String?
  color         String     @default("#3B82F6")
  icon          String?
  sequenceOrder Int
  isActive      Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  fiscalYear    FiscalYear @relation(fields: [fiscalYearId], references: [id], onDelete: Cascade)
  kpis          KPI[]

  @@unique([fiscalYearId, code])
  @@unique([fiscalYearId, sequenceOrder])
  @@map("fiscal_year_perspectives")
}

model PerformanceComponentTemplate {
  id                 String                           @id @default(cuid())
  fiscalYearId       String
  orgLevelId         String
  componentType      String
  componentName      String
  isStandard         Boolean                          @default(false)
  isMandatory        Boolean                          @default(false)
  sequenceOrder      Int
  metadata           Json                             @default("{}")
  createdAt          DateTime                         @default(now())
  updatedAt          DateTime                         @updatedAt
  entryRelationships PerformanceCascadeRelationship[] @relation("EntryComponent")
  exitRelationships  PerformanceCascadeRelationship[] @relation("ExitComponent")
  components         PerformanceComponent[]           // Components created from this template
  fiscalYear         FiscalYear                       @relation(fields: [fiscalYearId], references: [id], onDelete: Cascade)
  orgLevel           FiscalYearLevelDefinition        @relation(fields: [orgLevelId], references: [id], onDelete: Cascade)

  @@unique([fiscalYearId, orgLevelId, componentType])
  @@map("performance_component_templates")
}

model PerformanceCascadeRelationship {
  id               String                       @id @default(cuid())
  fiscalYearId     String
  fromLevelId      String
  toLevelId        String
  exitComponentId  String
  entryComponentId String
  createdAt        DateTime                     @default(now())
  entryComponent   PerformanceComponentTemplate @relation("EntryComponent", fields: [entryComponentId], references: [id], onDelete: Cascade)
  exitComponent    PerformanceComponentTemplate @relation("ExitComponent", fields: [exitComponentId], references: [id], onDelete: Cascade)
  fiscalYear       FiscalYear                   @relation(fields: [fiscalYearId], references: [id], onDelete: Cascade)
  fromLevel        FiscalYearLevelDefinition    @relation("FromLevel", fields: [fromLevelId], references: [id], onDelete: Cascade)
  toLevel          FiscalYearLevelDefinition    @relation("ToLevel", fields: [toLevelId], references: [id], onDelete: Cascade)

  @@map("performance_cascade_relationships")
}

model OrgUnitKpiChampion {
  id        String   @id @default(cuid())
  orgUnitId String
  userId    String
  assignedBy String
  assignedAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  orgUnit   OrgUnit  @relation(fields: [orgUnitId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([orgUnitId, userId])
  @@map("org_unit_kpi_champions")
}

enum ComponentType {
  ENTRY
  EXIT
}

model PerformanceComponent {
  id                    String                  @id @default(cuid())
  tenantId              String
  orgUnitId             String?                 // Optional - specific org unit this component belongs to
  name                  String
  description           String?
  organizationalLevel   String
  weight                Float                   @default(1.0)
  isActive              Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  
  // New fields for KPI exit components
  kpiId                 String?                 // For KPI exit components
  templateId            String?                 // Link to template if created from template
  componentType         ComponentType           @default(ENTRY)
  createdById           String?                 // Who created this component
  
  tenant                Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orgUnit               OrgUnit?                @relation(fields: [orgUnitId], references: [id], onDelete: SetNull)
  kpi                   KPI?                    @relation(fields: [kpiId], references: [id], onDelete: Cascade)
  template              PerformanceComponentTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  createdBy             User?                   @relation("CreatedComponents", fields: [createdById], references: [id], onDelete: SetNull)
  
  // KPIs that link to this performance component (cascade relationship)
  linkedKpis            KPI[]                   @relation("KPIPerformanceComponent")
  individualKpis        IndividualKPI[]
  organizationalKpis    OrganizationalKPI[]

  @@unique([tenantId, name, organizationalLevel], name: "tenantId_name_organizationalLevel")
  @@map("performance_components")
}

model IndividualKPI {
  id           String                @id @default(cuid())
  userId       String
  componentId  String
  name         String
  description  String?
  targetValue  Float
  currentValue Float                 @default(0)
  unit         String
  status       String                @default("NOT_STARTED")
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  
  user         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  component    PerformanceComponent  @relation(fields: [componentId], references: [id], onDelete: Cascade)

  @@map("individual_kpis")
}

model OrganizationalKPI {
  id                     String                @id @default(cuid())
  organizationalUnitId   String
  componentId            String
  name                   String
  description            String?
  targetValue            Float
  currentValue           Float                 @default(0)
  unit                   String
  status                 String                @default("NOT_STARTED")
  assignedById           String
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  
  organizationalUnit     OrgUnit               @relation(fields: [organizationalUnitId], references: [id], onDelete: Cascade)
  component              PerformanceComponent  @relation(fields: [componentId], references: [id], onDelete: Cascade)
  assignedBy             User                  @relation("AssignedKpis", fields: [assignedById], references: [id], onDelete: Cascade)

  @@map("organizational_kpis")
}

enum TargetType {
  NUMERIC
  STATUS
  PERCENTAGE
}

enum TargetDirection {
  INCREASING
  DECREASING
  N_A
}

enum FrequencyType {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  BIANNUAL
  ANNUAL
}

enum KPIStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

model KPI {
  id                      String            @id @default(cuid())
  tenantId                String
  fiscalYearId            String
  orgUnitId               String?
  perspectiveId           String?
  objectiveId             String
  performanceComponentId  String?           @map("performance_component_id") // Link to performance component (initiative)
  name                    String
  description             String?
  code                    String
  evaluatorId             String
  createdById             String
  isRecurring             Boolean           @default(false)
  frequency               FrequencyType?
  dueDate                 DateTime?
  isActive                Boolean           @default(true)
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  
  tenant                  Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  fiscalYear              FiscalYear        @relation(fields: [fiscalYearId], references: [id], onDelete: Cascade)
  orgUnit                 OrgUnit?          @relation(fields: [orgUnitId], references: [id], onDelete: SetNull)
  perspective             FiscalYearPerspective? @relation(fields: [perspectiveId], references: [id], onDelete: SetNull)
  objective               KPIObjective      @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
  performanceComponent    PerformanceComponent? @relation("KPIPerformanceComponent", fields: [performanceComponentId], references: [id], onDelete: SetNull)
  evaluator               User              @relation("EvaluatedKPIs", fields: [evaluatorId], references: [id], onDelete: Cascade)
  createdBy               User              @relation("CreatedKPIs", fields: [createdById], references: [id], onDelete: Cascade)
  
  target                  KPITarget?
  exitComponents          PerformanceComponent[]
  shares                  KPIShare[]
  auditLogs               KPIAuditLog[]

  @@unique([tenantId, fiscalYearId, code])
  @@map("kpis")
}

model KPITarget {
  id              String          @id @default(cuid())
  kpiId           String          @unique
  currentValue    String          @default("0")
  targetValue     String
  targetType      TargetType      @default(NUMERIC)
  targetLabel     String?
  targetDirection TargetDirection @default(INCREASING)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  kpi             KPI             @relation(fields: [kpiId], references: [id], onDelete: Cascade)

  @@map("kpi_targets")
}

model KPIObjective {
  id                    String     @id @default(cuid())
  tenantId              String
  fiscalYearId          String
  orgUnitId             String
  name                  String
  description           String?
  parentExitComponentId String?
  createdById           String
  isActive              Boolean    @default(true)
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  
  tenant                Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  fiscalYear            FiscalYear @relation(fields: [fiscalYearId], references: [id], onDelete: Cascade)
  orgUnit               OrgUnit    @relation(fields: [orgUnitId], references: [id], onDelete: Cascade)
  createdBy             User       @relation("CreatedObjectives", fields: [createdById], references: [id], onDelete: Cascade)
  
  kpis                  KPI[]

  @@map("kpi_objectives")
}

model KPIShare {
  id               String   @id @default(cuid())
  kpiId            String
  sharedWithUserId String
  sharedById       String
  canEdit          Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  kpi              KPI      @relation(fields: [kpiId], references: [id], onDelete: Cascade)
  sharedWithUser   User     @relation("SharedKPIs", fields: [sharedWithUserId], references: [id], onDelete: Cascade)
  sharedBy         User     @relation("SharedByKPIs", fields: [sharedById], references: [id], onDelete: Cascade)

  @@unique([kpiId, sharedWithUserId])
  @@map("kpi_shares")
}

model KPIAuditLog {
  id        String   @id @default(cuid())
  kpiId     String
  userId    String
  action    String
  oldValues Json?
  newValues Json?
  createdAt DateTime @default(now())
  
  kpi       KPI      @relation(fields: [kpiId], references: [id], onDelete: Cascade)
  user      User     @relation("KPIAudits", fields: [userId], references: [id], onDelete: Cascade)

  @@index([kpiId])
  @@map("kpi_audit_logs")
}
